/*
--disable all back end processes connected to a database
SELECT pg_terminate_backend(pg_stat_activity.pid)
FROM pg_stat_activity
WHERE pg_stat_activity.datname = 'TestDatabase'
  AND pid <> pg_backend_pid();
  
CREATE DATABASE "TestDatabase"
    WITH 
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'Polish_Poland.1250'
    LC_CTYPE = 'Polish_Poland.1250'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1;
	
	CREATE EXTENSION postgis;
	SELECT postgis_full_version();*/
	
	CREATE SEQUENCE public.hibernate_sequence
    INCREMENT 1
    START 1
    MINVALUE 1
    MAXVALUE 9223372036854775807
    CACHE 1;

ALTER SEQUENCE public.hibernate_sequence
    OWNER TO postgres;
	
-- osm layer
create table planet_osm_nodes(
	id bigserial primary key not null,
	tags text[],
	geom geometry(POINT)
);

create table planet_osm_ways(
	id bigserial primary key not null,
	nodes bigint[],
	tags text[],
	geom geometry(LINESTRING)
);

-- segment layer
create table sm_nodes(
	id bigserial primary key not null,
	osm_node bigint references planet_osm_nodes(id),
	geom geometry(POINT)
);
create table sm_links(
	id bigserial primary key not null,
	way_id bigint references planet_osm_ways(id),
	osm_start_node bigint references planet_osm_nodes(id),
	osm_end_node bigint references planet_osm_nodes(id),
	geom geometry(LINESTRING)
);
create table sm_segments(
	id bigserial primary key not null,
	link_id bigint references sm_links(id),
	start_node bigint references sm_nodes(id),
	end_node bigint references sm_nodes(id),
	inLineWithLink boolean,
	geom geometry(LINESTRING)
);

-- dictionary
create table sm_dictionary(
	id bigserial primary key not null,
	name text,
	description text,
	key text[],
	datatypes text[],
	required boolean[]
);

-- properties
create table sm_node_properties(
	id bigserial primary key not null,
	node_id bigint references sm_nodes(id),
	tags text[],
	description text,
	dictionary_id bigint references sm_dictionary(id)
);
create table sm_segment_properties(
	id bigserial primary key not null,
	segment_id bigint references sm_segments(id),
	tags text[],
	description text,
	dictionary_id bigint references sm_dictionary(id)
);
create table sm_link_properties(
	id bigserial primary key not null,
	link_id bigint references sm_links(id),
	tags text[],
	description text,
	dictionary_id bigint references sm_dictionary(id)
);

-- osm layer inserts
	
-- segment layer inserts
insert into sm_nodes (osm_node,geom) values
    (NULL,ST_GeomFromText('point(2 1)')),
	(NULL,ST_GeomFromText('point(2 4)')),
	(NULL,ST_GeomFromText('point(2 10)')),
	(NULL,ST_GeomFromText('point(5 3)')),
	(NULL,ST_GeomFromText('point(6 4)')),
	(NULL,ST_GeomFromText('point(8 6)')),
	(NULL,ST_GeomFromText('point(9 7)'));

insert into sm_links (way_id,osm_start_node,osm_end_node,geom) values
	(NULL,NULL,NULL,ST_GeomFromText('linestring(2 1,2 4,2 10)')),
	(NULL,NULL,NULL,ST_GeomFromText('linestring(9 7,5 3,2 4)'));

insert into	sm_segments (link_id,start_node,end_node,inLineWithLink,geom) values
	(5,1,2,true,ST_GeomFromText('linestring(2 1,2 4)')),
	(5,1,2,true,ST_GeomFromText('linestring(2 1,2 4)')),
	(5,2,1,false,ST_GeomFromText('linestring(2 4,2 1)')),
	(5,2,1,false,ST_GeomFromText('linestring(2 4,2 1)')),
	(5,2,3,true,ST_GeomFromText('linestring(2 4,2 10)')),
	(5,2,3,true,ST_GeomFromText('linestring(2 4,2 10)')),
	(5,3,2,false,ST_GeomFromText('linestring(2 10,2 4)')),
	(5,3,2,false,ST_GeomFromText('linestring(2 10,2 4)')),
	(6,4,2,true,ST_GeomFromText('linestring(5 3,2 4)')),
	(6,2,4,false,ST_GeomFromText('linestring(2 4,5 3)')),
	(6,5,6,false,ST_GeomFromText('linestring(6 4,8 6)')),
	(6,6,5,true,ST_GeomFromText('linestring(8 6,6 4)')),
	(6,5,6,false,ST_GeomFromText('linestring(6 4,8 6)')),
	(6,6,5,true,ST_GeomFromText('linestring(8 6,6 4)'));
	
-- dictionary inserts
insert into sm_dictionary (name,description,key,datatypes,required) values
	('Road category','Road category','{"Category"}','{"String"}','{FALSE}'),
	('Traffic lights','Traffic lights','{"Intelligent","With right turn","With pedestrians","With cyclists"}','{"Boolean","Boolean","Boolean","Boolean"}','{FALSE,FALSE,FALSE,FALSE}'),
	('Wild animals','Wild animals','{"Night only","Intensity of incidents"}','{"Boolean","Double"}','{FALSE,FALSE}'),
	('Road sign','Road sign','{"Type","Tablets"}','{"String","Tablets"}','{FALSE,FALSE}'),
	('Crossroads','Crossroads','{"Traffic intensity"}','{"Double"}','{FALSE}');
	
-- properties inserts
insert into sm_node_properties (node_id,tags,description,dictionary_id) values
	(2,'{"FALSE","FALSE","FALSE","FALSE"}','Traffic lights',2),
	(2,'{"120"}','Crossroads',5),
	(5,'{"A-18B",""}','Wild animals',4),
	(6,'{"A-18B",""}','Wild animals',4),
	(5,'{"A-18B","T-3"}','Wild animals',4),
	(6,'{"A-18B","T-3"}','Wild animals',4);

insert into sm_link_properties (link_id,tags,description,dictionary_id) values
	(5,'{"G"}','Road category',1),
	(6,'{"Z"}','Road category',1);
		
insert into sm_segment_properties (segment_id,tags,description,dictionary_id) values
	(15,'{"G"}','Road category',1),
	(16,'{"G"}','Road category',1),
	(17,'{"G"}','Road category',1),
	(18,'{"G"}','Road category',1),
	(19,'{"G"}','Road category',1),
	(20,'{"G"}','Road category',1),
	(21,'{"G"}','Road category',1),
	(22,'{"G"}','Road category',1),	
	(23,'{"D"}','Road category',1),
	(24,'{"D"}','Road category',1),
	(25,'{"D"}','Road category',1),
	(26,'{"D"}','Road category',1),
	(27,'{"FALSE","56"}','Wild animals',3),
	(28,'{"FALSE","56"}','Wild animals',3);
